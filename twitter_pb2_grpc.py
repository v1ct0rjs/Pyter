# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import twitter_pb2 as twitter__pb2


class TwitterStub(object):
    """Se definen los procedimientos remotos que el cliente puede invocar del servidor
    Cada procedimiento remoto tiene un request(petición) y un reply (respuesta) que se definen posteriormente
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Registrar = channel.unary_unary(
                '/my_twitter.Twitter/Registrar',
                request_serializer=twitter__pb2.RegistrarRequest.SerializeToString,
                response_deserializer=twitter__pb2.RegistrarReply.FromString,
                )
        self.Login = channel.unary_unary(
                '/my_twitter.Twitter/Login',
                request_serializer=twitter__pb2.LoginRequest.SerializeToString,
                response_deserializer=twitter__pb2.LoginReply.FromString,
                )
        self.Logout = channel.unary_unary(
                '/my_twitter.Twitter/Logout',
                request_serializer=twitter__pb2.LogoutRequest.SerializeToString,
                response_deserializer=twitter__pb2.Void.FromString,
                )
        self.VerUsuarios = channel.unary_unary(
                '/my_twitter.Twitter/VerUsuarios',
                request_serializer=twitter__pb2.VerUsuariosRequest.SerializeToString,
                response_deserializer=twitter__pb2.VerUsuariosReply.FromString,
                )
        self.Seguir = channel.unary_unary(
                '/my_twitter.Twitter/Seguir',
                request_serializer=twitter__pb2.SeguirRequest.SerializeToString,
                response_deserializer=twitter__pb2.SeguirReply.FromString,
                )
        self.DejarSeguir = channel.unary_unary(
                '/my_twitter.Twitter/DejarSeguir',
                request_serializer=twitter__pb2.SeguirRequest.SerializeToString,
                response_deserializer=twitter__pb2.SeguirReply.FromString,
                )
        self.VerSeguidos = channel.unary_unary(
                '/my_twitter.Twitter/VerSeguidos',
                request_serializer=twitter__pb2.VerSeguidosRequest.SerializeToString,
                response_deserializer=twitter__pb2.VerSeguidosReply.FromString,
                )
        self.EnviarTuit = channel.unary_unary(
                '/my_twitter.Twitter/EnviarTuit',
                request_serializer=twitter__pb2.EnviarTuitRequest.SerializeToString,
                response_deserializer=twitter__pb2.Void.FromString,
                )
        self.RecibirTuits = channel.unary_unary(
                '/my_twitter.Twitter/RecibirTuits',
                request_serializer=twitter__pb2.RecibirTuitsRequest.SerializeToString,
                response_deserializer=twitter__pb2.RecibirTuitsReply.FromString,
                )


class TwitterServicer(object):
    """Se definen los procedimientos remotos que el cliente puede invocar del servidor
    Cada procedimiento remoto tiene un request(petición) y un reply (respuesta) que se definen posteriormente
    """

    def Registrar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerUsuarios(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Seguir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DejarSeguir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerSeguidos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnviarTuit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecibirTuits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TwitterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Registrar': grpc.unary_unary_rpc_method_handler(
                    servicer.Registrar,
                    request_deserializer=twitter__pb2.RegistrarRequest.FromString,
                    response_serializer=twitter__pb2.RegistrarReply.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=twitter__pb2.LoginRequest.FromString,
                    response_serializer=twitter__pb2.LoginReply.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=twitter__pb2.LogoutRequest.FromString,
                    response_serializer=twitter__pb2.Void.SerializeToString,
            ),
            'VerUsuarios': grpc.unary_unary_rpc_method_handler(
                    servicer.VerUsuarios,
                    request_deserializer=twitter__pb2.VerUsuariosRequest.FromString,
                    response_serializer=twitter__pb2.VerUsuariosReply.SerializeToString,
            ),
            'Seguir': grpc.unary_unary_rpc_method_handler(
                    servicer.Seguir,
                    request_deserializer=twitter__pb2.SeguirRequest.FromString,
                    response_serializer=twitter__pb2.SeguirReply.SerializeToString,
            ),
            'DejarSeguir': grpc.unary_unary_rpc_method_handler(
                    servicer.DejarSeguir,
                    request_deserializer=twitter__pb2.SeguirRequest.FromString,
                    response_serializer=twitter__pb2.SeguirReply.SerializeToString,
            ),
            'VerSeguidos': grpc.unary_unary_rpc_method_handler(
                    servicer.VerSeguidos,
                    request_deserializer=twitter__pb2.VerSeguidosRequest.FromString,
                    response_serializer=twitter__pb2.VerSeguidosReply.SerializeToString,
            ),
            'EnviarTuit': grpc.unary_unary_rpc_method_handler(
                    servicer.EnviarTuit,
                    request_deserializer=twitter__pb2.EnviarTuitRequest.FromString,
                    response_serializer=twitter__pb2.Void.SerializeToString,
            ),
            'RecibirTuits': grpc.unary_unary_rpc_method_handler(
                    servicer.RecibirTuits,
                    request_deserializer=twitter__pb2.RecibirTuitsRequest.FromString,
                    response_serializer=twitter__pb2.RecibirTuitsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'my_twitter.Twitter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Twitter(object):
    """Se definen los procedimientos remotos que el cliente puede invocar del servidor
    Cada procedimiento remoto tiene un request(petición) y un reply (respuesta) que se definen posteriormente
    """

    @staticmethod
    def Registrar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/my_twitter.Twitter/Registrar',
            twitter__pb2.RegistrarRequest.SerializeToString,
            twitter__pb2.RegistrarReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/my_twitter.Twitter/Login',
            twitter__pb2.LoginRequest.SerializeToString,
            twitter__pb2.LoginReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/my_twitter.Twitter/Logout',
            twitter__pb2.LogoutRequest.SerializeToString,
            twitter__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerUsuarios(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/my_twitter.Twitter/VerUsuarios',
            twitter__pb2.VerUsuariosRequest.SerializeToString,
            twitter__pb2.VerUsuariosReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Seguir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/my_twitter.Twitter/Seguir',
            twitter__pb2.SeguirRequest.SerializeToString,
            twitter__pb2.SeguirReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DejarSeguir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/my_twitter.Twitter/DejarSeguir',
            twitter__pb2.SeguirRequest.SerializeToString,
            twitter__pb2.SeguirReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerSeguidos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/my_twitter.Twitter/VerSeguidos',
            twitter__pb2.VerSeguidosRequest.SerializeToString,
            twitter__pb2.VerSeguidosReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnviarTuit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/my_twitter.Twitter/EnviarTuit',
            twitter__pb2.EnviarTuitRequest.SerializeToString,
            twitter__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecibirTuits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/my_twitter.Twitter/RecibirTuits',
            twitter__pb2.RecibirTuitsRequest.SerializeToString,
            twitter__pb2.RecibirTuitsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
